<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
    <title>PyKwiki</title>
    <link>http://pykwiki-classic.nullism.com/</link>
    <description>PyKwiki is a static file wiki suitable for blogs, wikis, or almost any type of documentation</description>
    
    <item>
        <title>Welcome!</title>
        <link>http://pykwiki-classic.nullism.com/home.html</link>
        <pubDate>Thu, 10 Dec 2015 15:16:46 EST</pubDate>
        <description>PyKwiki introduction for new site administrators.</description>
    </item>    
    
    <item>
        <title>Themes</title>
        <link>http://pykwiki-classic.nullism.com/themes.html</link>
        <pubDate>Thu, 10 Dec 2015 15:16:46 EST</pubDate>
        <description> Built-in themes PyKwiki features some built-in themes that can be installed with `pykwiki theme install theme_name`. div class="row" {tpl:theme} name: Default class: col-sm-4 description: The default PyKwiki theme. image: pykwiki-theme-default.png features: - Valid HTML5 - Mobile friendly - Uses Bootstrap 3 - Supports searching - Includes respond.js for IE8...</description>
    </item>    
    
    <item>
        <title>config.yaml</title>
        <link>http://pykwiki-classic.nullism.com/config.yaml.html</link>
        <pubDate>Thu, 10 Dec 2015 15:16:46 EST</pubDate>
        <description>{tpl:versionwarning} version: 1.0 {endtpl}  config.yaml Below is a typical `config.yaml` file :::yaml  Maximum number of words to use in a blurb blurb_max: 50  The default home page to be written as docroot/index.html home_page: home.md site:  The site title, used in title title: My PyKwiki Project ...</description>
    </item>    
    
    <item>
        <title>Download</title>
        <link>http://pykwiki-classic.nullism.com/download.html</link>
        <pubDate>Thu, 10 Dec 2015 15:16:46 EST</pubDate>
        <description> Download PyKwiki There are a few different ways to download PyKwiki  On Github Get the latest and greatest version on Github. a href="https://github.com/nullism/pykwiki/archive/master.zip" class="btn btn-lg btn-success"Github b class="glyphicon glyphicon-download"/b/a * Or clone it directly with `git clone https://github.com/nullism/pykwiki.git` Install using `sudo ./setup.py install`  From PyPI Get the...</description>
    </item>    
    
    <item>
        <title>Helper Templates</title>
        <link>http://pykwiki-classic.nullism.com/templates.html</link>
        <pubDate>Thu, 10 Dec 2015 15:16:46 EST</pubDate>
        <description>[TOC]  Helper Templates This page contains a collection of templates that may be considered useful.  Simple Tables This template is a quick way to add simple tables without writing HTML. It takes two arguments: * `headers` - An *optional* YAML list specifying `th` elements - column headers. *...</description>
    </item>    
    
    <item>
        <title>Support</title>
        <link>http://pykwiki-classic.nullism.com/support.html</link>
        <pubDate>Thu, 10 Dec 2015 15:16:46 EST</pubDate>
        <description> Support The preferred method to report issues or ask questions is via the PyKwiki Github page. a href="https://github.com/nullism/pykwiki/issues" class="btn btn-default btn-lg"Github/a...</description>
    </item>    
    
    <item>
        <title>Getting Started</title>
        <link>http://pykwiki-classic.nullism.com/getting-started.html</link>
        <pubDate>Thu, 10 Dec 2015 15:16:46 EST</pubDate>
        <description>[TOC]  Getting Started This guide outlines the minimal steps to get PyKwiki serving static files.  Requirements PyKwiki does not require anything outside of Python, but it does require the following Python packages: * `jinja2` (=2.6) - Jinja2 is used to compile themes into .html. * Install with `sudo...</description>
    </item>    
    
    <item>
        <title>About Search</title>
        <link>http://pykwiki-classic.nullism.com/about-search.html</link>
        <pubDate>Thu, 10 Dec 2015 15:16:46 EST</pubDate>
        <description>[TOC]  About Search  How it works  1. The search index Existing content is cached, and a search index is built. $ pykwiki cache ... The search index gets written to `conf.index_file` (default: `idx.json`). **Sample JSON index file format** :::javascript { "index":{ "foo":[3,2,5], "bar":[3,1,6], "baz":[2], ... }, "ids":{...</description>
    </item>    
    
    <item>
        <title>API</title>
        <link>http://pykwiki-classic.nullism.com/api.html</link>
        <pubDate>Thu, 10 Dec 2015 15:16:46 EST</pubDate>
        <description>[TOC] {tpl:versionwarning} version: 1.0 {endtpl}  Application Programming Interface  conf Object The conf object is made available to all theme templates.  Properties **config.yaml** Any property in `config.yaml` is available to this object. **Useful properties for themes** * `web_prefix` - When a theme makes calls to local resources, it...</description>
    </item>    
    
    <item>
        <title>Feature Comparison</title>
        <link>http://pykwiki-classic.nullism.com/comparison.html</link>
        <pubDate>Thu, 10 Dec 2015 15:16:46 EST</pubDate>
        <description> Compare PyKwiki, WordPress, Drupal, and MediaWiki {tpl:table} headers: - '' - PyKwiki - WordPress - Drupal - MediaWiki rows: - - "bAuthoring/b" - "Markdown file-based" - "WYSIWYG" - "WYSIWYG" - "MediaWiki web editor" - - "bHosting/b" - 'Static files' - "PHP and MySQL required" - "PHP and MySQL required"...</description>
    </item>    
    
    <item>
        <title>Testing</title>
        <link>http://pykwiki-classic.nullism.com/testing.html</link>
        <pubDate>Thu, 10 Dec 2015 15:16:46 EST</pubDate>
        <description>[[faqs:section:one]] :::bash $ sudo pip install pykwiki ... $ pykwiki new MyProject ... $ cd MyProject $ pykwiki cache $ cd docroot $ python -m SimpleHTTPServer 5000 Serving HTTP on 0.0.0.0 port 5000 ......</description>
    </item>    
    
    <item>
        <title>Creating Themes</title>
        <link>http://pykwiki-classic.nullism.com/creating-themes.html</link>
        <pubDate>Thu, 10 Dec 2015 15:16:46 EST</pubDate>
        <description>[TOC] {tpl:versionwarning} version: 1.0.1 {endtpl}  Creating themes PyKwiki themes are designed to be easy to create. Visit [[api]] to see a list of advanced functions and properties available to themes.  Theme Directory Structure :::text ThemeName/ info.yaml options.yaml menu.html post.html postlist.html posts.html search.html static/ * `info.yaml` - Includes information...</description>
    </item>    
    
    <item>
        <title>Markdown Basics</title>
        <link>http://pykwiki-classic.nullism.com/markdown.html</link>
        <pubDate>Thu, 10 Dec 2015 15:16:46 EST</pubDate>
        <description> Markdown Markdown is a popular text format for editing files. It is often used to produce well formatted web content. It is used extensively by GitHub, Reddit, Stack Overflow, and many others. One of the easiest ways to become familiar with Markdown is to [give it a try](https://stackedit.io)! ...</description>
    </item>    
    
    <item>
        <title>Extensions</title>
        <link>http://pykwiki-classic.nullism.com/extensions.html</link>
        <pubDate>Thu, 10 Dec 2015 15:16:46 EST</pubDate>
        <description>[TOC]  PyKwiki Extensions  MarkDown Extensions  pykwiki.ext.post {tpl:versionwarning} version: 1.0 {endtpl} This extension is not compatible with the `wikilink` markdown extension. This extension syntax is: [[page:optional property]] Assuming you have a post in `source` called `home.md` with `title` set to "Home", then the following MarkDown: :::text Here is...</description>
    </item>    
    
    <item>
        <title>Release Notes</title>
        <link>http://pykwiki-classic.nullism.com/release-notes.html</link>
        <pubDate>Thu, 10 Dec 2015 15:16:46 EST</pubDate>
        <description>[TOC]  v1.0.1 - 2013-11-21 First stable release. Is **not** compatible with previous versions. * renamed "Page", "PageController" and all related methods and instances to use "post" instead of "page" * updated themes to use new Post system. * major changes to `pykwiki.core` * All instances of Page are now...</description>
    </item>    
    
    <item>
        <title>links.yaml</title>
        <link>http://pykwiki-classic.nullism.com/links.yaml.html</link>
        <pubDate>Thu, 10 Dec 2015 15:16:46 EST</pubDate>
        <description> links.yaml The `links.yaml` file specifies how PyKwiki should generate a menu for your site. **Example of the structure of a link:** :::yaml - Example Link Name:  PyKwiki page name, relative to the source directory, *optional* post: external-links  Used in a href=, *optional* href: http://google.com  Target attribute,...</description>
    </item>    
    
    <item>
        <title>Speed</title>
        <link>http://pykwiki-classic.nullism.com/speed.html</link>
        <pubDate>Thu, 10 Dec 2015 15:16:46 EST</pubDate>
        <description> Faster than PHP PyKwiki is fast because it's 100% static. No server side processing is necessary. Why regenerate a page every single time someone visits it? PyKwiki regenerates the page only when its content has changed. *But wait! How can that be if you have built-in searching?* PyKwiki generates...</description>
    </item>    
    
    <item>
        <title>Authoring Posts</title>
        <link>http://pykwiki-classic.nullism.com/authoring.html</link>
        <pubDate>Thu, 10 Dec 2015 15:16:46 EST</pubDate>
        <description>[TOC]  Overview Adding posts to your PyKwiki consists of two main pieces. 1. Some way to get your content to a server. 2. Some way to run `pykwiki cache` to cache your content.  Things to know Technical knowledge: 1. A basic understanding of [Markdown](/markdown.html). 2. A basic understanding...</description>
    </item>    
    
    <item>
        <title>Frequently Asked Questions</title>
        <link>http://pykwiki-classic.nullism.com/faqs.html</link>
        <pubDate>Thu, 10 Dec 2015 15:16:46 EST</pubDate>
        <description>[TOC]  Frequently Asked Questions  About authoring {section:one}  How do I specify the date of the post? In the [post configuration section](/authoring.htmlpost-data-block), set the `timestamp` key. It must match the format from [[config.yaml]] - `timestamp_format`. **Example** :::text [[ title: My Post tags: [stuff, moar stuff] timestamp: 2013-11-13 21:14...</description>
    </item>    
    
    <item>
        <title>PyKwiki Command Line</title>
        <link>http://pykwiki-classic.nullism.com/command-line.html</link>
        <pubDate>Thu, 10 Dec 2015 15:16:46 EST</pubDate>
        <description> Basic Usage :::bash usage: pykwiki [-h] [-b BASE_PATH] [-c CONFIG_FILE] {new,index,cache,info,theme} ... positional arguments: {new,index,cache,info,theme} new create a new project index build the search index cache cache and index posts info display PyKwiki information theme control built-in themes optional arguments: -h, --help show this help message and exit -b...</description>
    </item>    
    
</channel>
</rss>